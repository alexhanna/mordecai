{"name":"Mordecai","tagline":"Full text geocoding software.","body":"![http://caerusassociates.com/wp-content/uploads/2012/03/Caerus_logo.png](http://caerusassociates.com/wp-content/uploads/2012/03/Caerus_logo.png)\r\n\r\nMordecai is a new, automated document geocoding system built by Caerus Associates. Mordecai has global coverage that seeks to improve on existing geocoding approaches in three ways: improved accuracy, ability to limit searches to a defined country or region, and ease of switching out named entity recognition services. Mordecai runs as a web service, exposing two endpoints: `/country`, for determining the country focus of a piece of text, and `/places`, for returning latitude and longitude for each individual place mentioned in the text.\r\n\r\nAt its most basic, automated geocoding of text is made up of three steps:\r\n\r\n1. recognizing and extracting place words in text\r\n2. resolving ambiguous place names to the best available place name \r\n3. finding the latitude and longitude for the correctly resolved place\r\n\r\nMordecai does all three steps, accepting text as input and returning a list of place names and latitude/longitudes as output.\r\n\r\n##Step 1: MITIE Named Entity Recognition\r\n\r\nThe first step in any geocoding pipeline is to extract place name words from text. For this task, Mordecai uses MIT Lincoln Labs’s MITIE, a fast and accurate XDATA-funded named entity recognition (NER) system. MITIE comes with a model trained on a large corpus of news text. Mordecai uses the pre-trained model, though training a custom model for non-standard text is straightforward and something we have done in other applications. Our MITIE wrapper returns a list of labeled entities (people, locations, organizations, and miscellaneous) and a bag of \"context\" words occurring on either side of each extracted entity.\r\n\r\n##Step 2: Establishing the country with the `/country` endpoint\r\n\r\nTaken in isolation, a place name like \"Prague\" could be resolved to several places. Searching a place name gazetteer like Geonames.org, which Mordecai uses, finds both the obvious (Prague, Czech Republic) and the obscure (Prague, Oklahoma). A naïve approach might take all of the place names mentioned in the text, find all the countries that have a location with that name, and sum the \"votes\" for each country. However, that approach is enormously skewed toward large, connected, English speaking countries, resulting in the bias toward the United States observed in other geocoding systems.\r\n\r\nInstead, Mordecai uses a sophisticated neural network model called `word2vec` that represents words as vectors in high-dimensional space. These vectors are the output of an unsupervised learning model that takes large amounts of text as inputs and learns a model that represents a remarkably large degree of the word’s semantic meaning in the vector. Mordecai converts each location name into a word2vec vector, which is compared to the word2vec vector for each country name in the world. The country with the closest similarity to the locations from a document is treated as the subject country of the document. In the case of Prague, it finds that it is much closer to the vector representation of \"Czech_Republic\" than the \"Oklahoma\" vector, similar to human intuition:\r\n\r\n```\r\ntrained_model.similarity(\"Prague\", \"Oklahoma\")\r\n0.171944306651\r\ntrained_model.similarity(\"Prague\", \"Czech_Republic\")\r\n0.602116649669\r\n```\r\n\r\nThis \"one best country\" result can be used on its own for selecting documents pertaining to a country, or as an input to the third step of the process.\r\n\r\n##Step 3: Resolving each place name with the `/places` endpoint\r\n\r\nThe final step in the Mordecai pipeline is to take a list of places names, their context words, and a country filter and perform an optimized search for each place name in a global gazetteer of place names. Mordecai holds the Geonames gazetteer in Elasticsearch, a search server that allows for very fast full text search and highly customized queries. The “context” words that occur on either side of the place name allow us to narrow our search to only specific kinds of Geonames records in cases where the context words include terms like \"city of\" or \"Governorate.\" The context words and `word2vec` results allow us to dramatically cut down on the search results and help us pick place names without resorting to brittle hard-coded rules or lots of conditional logic or regex.\r\n\r\n##Example Usage\r\n```\r\ncurl -XPOST -H \"Content-Type: application/json\" \r\n--data '{\"text\":\"The death toll from the April 25 quake in the \r\nHimalayan mountain nation has reached 7,675, with more than 16,300 \r\npeople injured, the government said. As rescuers hunted for more \r\nthan 180 bodies in the village of Langtang, 60 km (37 miles) north of \r\nthe capital Kathmandu, seven bodies including of that of a German trekker\r\n were recovered at Manaslu, another climbing site.\"}' 'localhost:5000/places'\r\n```\r\n\r\nReturns:\r\n\r\n```\r\n[{\"lat\": 28.21717, \"searchterm\": \"Langtang\", \"lon\": 85.52262, \r\n\"countrycode\": \"NPL\", \"placename\": \"Langtang\"}, {\"lat\": 27.70169, \r\n\"searchterm\": \"Kathmandu\", \"lon\": 85.3206, \"countrycode\": \"NPL\", \r\n\"placename\": \"Kathmandu\"}, {\"lat\": 27.71925, \"searchterm\": \"Manaslu\", \r\n\"lon\": 85.3211, \"countrycode\": \"NPL\", \"placename\": \"Manaslu\"}]\r\n```\r\n\r\n##Technical Details\r\n\r\nMITIE is written in C/C++ and is called through a Python wrapper. The `/country` and `/places` endpoints are both web services, written in Python and served using Flask. The Geonames gazetteer is stored in Elasticsearch, which runs in a Docker container. Both Elasticsearch and Mordecai itself perform caching to speed repetitive queries. For more information:\r\n\r\n* MITIE: https://github.com/mit-nlp/MITIE\r\n* Tangelo: http://tangelo.readthedocs.org/en/v0.9/\r\n* Geonames: http://www.geonames.org/\r\n* word2vec: https://code.google.com/p/word2vec/","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}